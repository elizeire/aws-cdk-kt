"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_s3_1 = require("@aws-sdk/client-s3");
const handler = async (event) => {
    const s3 = new client_s3_1.S3Client({ region: process.env.AWS_REGION });
    if (!event.pathParameters || !event.pathParameters.id) {
        return {
            statusCode: 400,
            headers: {},
            isBase64Encoded: false,
            body: "Data is missing from payload, schema: {pathParameters:{id:string}}"
        };
    }
    const command = new client_s3_1.GetObjectCommand({
        Bucket: process.env.BUCKET_NAME, Key: event.pathParameters.id
    });
    // Create a helper function to convert a ReadableStream to a string.
    const streamToByteArray = (stream) => new Promise((resolve, reject) => {
        const chunks = [];
        stream.on("data", (chunk) => chunks.push(chunk));
        stream.on("error", reject);
        stream.on("end", () => resolve(Buffer.concat(chunks)));
    });
    const data = await s3.send(command);
    const bodyContents = await streamToByteArray(data.Body);
    return {
        statusCode: 200,
        headers: { "Content-Encoding": "gzip" },
        isBase64Encoded: true,
        body: bodyContents
    };
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2V0RG9jdW1lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvR2V0RG9jdW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0Esa0RBQXNGO0FBSS9FLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFDeEIsS0FBMkIsRUFDSixFQUFFO0lBRXpCLE1BQU0sRUFBRSxHQUFHLElBQUksb0JBQVEsQ0FBQyxFQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBQyxDQUFDLENBQUM7SUFDMUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRTtRQUNuRCxPQUFPO1lBQ0gsVUFBVSxFQUFFLEdBQUc7WUFDZixPQUFPLEVBQUUsRUFBRTtZQUNYLGVBQWUsRUFBQyxLQUFLO1lBQ3JCLElBQUksRUFBRSxvRUFBb0U7U0FDN0UsQ0FBQTtLQUNKO0lBRUQsTUFBTSxPQUFPLEdBQUcsSUFBSSw0QkFBZ0IsQ0FBQztRQUNqQyxNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxjQUFjLENBQUMsRUFBRTtLQUNoRSxDQUFDLENBQUE7SUFFRixvRUFBb0U7SUFDcEUsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLE1BQXFCLEVBQUUsRUFBRSxDQUNoRCxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUM1QixNQUFNLE1BQU0sR0FBaUIsRUFBRSxDQUFDO1FBQ2hDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDakQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDM0IsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNELENBQUMsQ0FBQyxDQUFDO0lBRVAsTUFBTSxJQUFJLEdBQTJCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUU1RCxNQUFNLFlBQVksR0FBRyxNQUFNLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUd4RCxPQUFPO1FBQ0gsVUFBVSxFQUFFLEdBQUc7UUFDZixPQUFPLEVBQUUsRUFBQyxrQkFBa0IsRUFBRSxNQUFNLEVBQUM7UUFDckMsZUFBZSxFQUFFLElBQUk7UUFDckIsSUFBSSxFQUFFLFlBQVk7S0FDckIsQ0FBQTtBQUVMLENBQUMsQ0FBQTtBQXZDWSxRQUFBLE9BQU8sV0F1Q25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBUElHYXRld2F5UHJveHlFdmVudH0gZnJvbSBcImF3cy1sYW1iZGFcIjtcclxuaW1wb3J0IHtHZXRPYmplY3RDb21tYW5kLCBHZXRPYmplY3RDb21tYW5kT3V0cHV0LCBTM0NsaWVudH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1zM1wiO1xyXG5pbXBvcnQgUmVhZGFibGVTdHJlYW0gPSBOb2RlSlMuUmVhZGFibGVTdHJlYW07XHJcbmltcG9ydCB7TGFtYmRhUmVzcG9uc2V9IGZyb20gXCIuL21vZGVsL0xhbWJkYVJlc3BvbnNlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChcclxuICAgIGV2ZW50OiBBUElHYXRld2F5UHJveHlFdmVudFxyXG4pOiBQcm9taXNlPExhbWJkYVJlc3BvbnNlPiA9PiB7XHJcblxyXG4gICAgY29uc3QgczMgPSBuZXcgUzNDbGllbnQoe3JlZ2lvbjogcHJvY2Vzcy5lbnYuQVdTX1JFR0lPTn0pO1xyXG4gICAgaWYgKCFldmVudC5wYXRoUGFyYW1ldGVycyB8fCAhZXZlbnQucGF0aFBhcmFtZXRlcnMuaWQpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzdGF0dXNDb2RlOiA0MDAsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHt9LFxyXG4gICAgICAgICAgICBpc0Jhc2U2NEVuY29kZWQ6ZmFsc2UsXHJcbiAgICAgICAgICAgIGJvZHk6IFwiRGF0YSBpcyBtaXNzaW5nIGZyb20gcGF5bG9hZCwgc2NoZW1hOiB7cGF0aFBhcmFtZXRlcnM6e2lkOnN0cmluZ319XCJcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY29tbWFuZCA9IG5ldyBHZXRPYmplY3RDb21tYW5kKHtcclxuICAgICAgICBCdWNrZXQ6IHByb2Nlc3MuZW52LkJVQ0tFVF9OQU1FLCBLZXk6IGV2ZW50LnBhdGhQYXJhbWV0ZXJzLmlkXHJcbiAgICB9KVxyXG5cclxuICAgIC8vIENyZWF0ZSBhIGhlbHBlciBmdW5jdGlvbiB0byBjb252ZXJ0IGEgUmVhZGFibGVTdHJlYW0gdG8gYSBzdHJpbmcuXHJcbiAgICBjb25zdCBzdHJlYW1Ub0J5dGVBcnJheSA9IChzdHJlYW06UmVhZGFibGVTdHJlYW0pID0+XHJcbiAgICAgICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjaHVua3M6IFVpbnQ4QXJyYXlbXSA9IFtdO1xyXG4gICAgICAgICAgICBzdHJlYW0ub24oXCJkYXRhXCIsIChjaHVuaykgPT4gY2h1bmtzLnB1c2goY2h1bmspKTtcclxuICAgICAgICAgICAgc3RyZWFtLm9uKFwiZXJyb3JcIiwgcmVqZWN0KTtcclxuICAgICAgICAgICAgc3RyZWFtLm9uKFwiZW5kXCIsICgpID0+IHJlc29sdmUoQnVmZmVyLmNvbmNhdChjaHVua3MpKSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgY29uc3QgZGF0YTogR2V0T2JqZWN0Q29tbWFuZE91dHB1dCA9IGF3YWl0IHMzLnNlbmQoY29tbWFuZCk7XHJcblxyXG4gICAgY29uc3QgYm9keUNvbnRlbnRzID0gYXdhaXQgc3RyZWFtVG9CeXRlQXJyYXkoZGF0YS5Cb2R5KTtcclxuXHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXHJcbiAgICAgICAgaGVhZGVyczoge1wiQ29udGVudC1FbmNvZGluZ1wiOiBcImd6aXBcIn0sXHJcbiAgICAgICAgaXNCYXNlNjRFbmNvZGVkOiB0cnVlLFxyXG4gICAgICAgIGJvZHk6IGJvZHlDb250ZW50c1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=