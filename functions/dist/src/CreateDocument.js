"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const client_s3_1 = require("@aws-sdk/client-s3");
const crypto_js_1 = require("crypto-js");
const node_gzip_1 = require("node-gzip");
const handler = async (event, context) => {
    // payload schema
    const schema = "{\n" +
        "  \"docsData\": {\n" +
        "    \"headers\": {\n" +
        "      \"owner\": \"senorics\",\n" +
        "      \"filename\": \"my-eqe-file.sif\",\n" +
        "      \"size\": \"1024\",\n" +
        "      \"content_type\": \"text/x.senorics.interchange\"\n" +
        "    },\n" +
        "    \"body\": {\n" +
        "      \"document\": \"{my document values}\"\n" +
        "    }\n" +
        "  }\n" +
        "}";
    // validates payload content
    if (!event.docsData) {
        return {
            statusCode: 400,
            headers: {},
            isBase64Encoded: false,
            body: "Data is missing from payload, schema example: " + schema
        };
    }
    const docHeaders = event.docsData.headers;
    const doc = event.docsData.body;
    if (!docHeaders) {
        return {
            statusCode: 400,
            headers: {},
            isBase64Encoded: false,
            body: "Document headers are missing, schema example: " + schema
        };
    }
    if (!doc) {
        return {
            statusCode: 400,
            headers: {},
            isBase64Encoded: false,
            body: "Document content is missing, schema example: " + schema
        };
    }
    const client = new client_dynamodb_1.DynamoDBClient({ region: process.env.AWS_REGION });
    let id = docHeaders.id || context.awsRequestId;
    const metadata = {
        id: id,
        owner: docHeaders.owner,
        filename: docHeaders.filename,
        size: docHeaders.size,
        content_type: docHeaders.content_type,
        created: Date.now(),
        modified: Date.now(),
        deleted: false,
        uri: process.env.BUCKET_NAME + "/" + id,
        md5: crypto_js_1.MD5(doc.document).toString(),
        sha1: crypto_js_1.SHA1(doc.document).toString(),
        sha256: crypto_js_1.SHA256(doc.document).toString(),
        sha512: crypto_js_1.SHA512(doc.document).toString(),
    };
    const params = {
        TableName: process.env.TABLE_NAME,
        Item: {
            id: { S: metadata.id },
            owner: { S: metadata.owner },
            filename: { S: metadata.filename },
            uri: { S: metadata.uri },
            size: { N: metadata.size },
            content_type: { S: metadata.content_type },
            created: { N: metadata.created + "" },
            modified: { N: metadata.modified + "" },
            deleted: { BOOL: metadata.deleted },
            md5: { S: metadata.md5 },
            sha1: { S: metadata.sha1 },
            sha256: { S: metadata.sha256 },
            sha512: { S: metadata.sha512 },
        },
    };
    const command = new client_dynamodb_1.PutItemCommand(params);
    let resultDynamoDb = await client.send(command);
    const s3 = new client_s3_1.S3Client({ region: process.env.AWS_REGION });
    //S3 storing document
    let resultS3 = await s3.send(new client_s3_1.PutObjectCommand({
        ContentEncoding: "gzip",
        Bucket: process.env.BUCKET_NAME,
        Key: metadata.id + "/content",
        Body: await node_gzip_1.gzip(JSON.stringify(doc))
    }));
    //S3 storing metadata
    let resultMetadataS3 = await s3.send(new client_s3_1.PutObjectCommand({
        ContentEncoding: "gzip",
        Bucket: process.env.BUCKET_NAME,
        Key: metadata.id + "/metadata.json",
        Body: await node_gzip_1.gzip(JSON.stringify(metadata))
    }));
    let bodyContents = `id:${metadata.id},
            document:{${JSON.stringify(resultS3)}}, 
            metadataDynamo:{${JSON.stringify(resultDynamoDb)}},
            metadataS3:{${JSON.stringify(resultMetadataS3)}}`;
    return {
        statusCode: 201,
        headers: { "Content-Type": "application/json" },
        isBase64Encoded: false,
        body: Buffer.from(bodyContents, 'utf8')
    };
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,